// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "PhysicsConfiguration.hpp"

// PhysicsConfiguration
// 

const PhysicsConfiguration::Component_sequence& PhysicsConfiguration::
Component () const
{
  return this->Component_;
}

PhysicsConfiguration::Component_sequence& PhysicsConfiguration::
Component ()
{
  return this->Component_;
}

void PhysicsConfiguration::
Component (const Component_sequence& s)
{
  this->Component_ = s;
}


// Component
// 

const Component::Parameter_sequence& Component::
Parameter () const
{
  return this->Parameter_;
}

Component::Parameter_sequence& Component::
Parameter ()
{
  return this->Parameter_;
}

void Component::
Parameter (const Parameter_sequence& s)
{
  this->Parameter_ = s;
}

const Component::type_optional& Component::
type () const
{
  return this->type_;
}

Component::type_optional& Component::
type ()
{
  return this->type_;
}

void Component::
type (const type_type& x)
{
  this->type_.set (x);
}

void Component::
type (const type_optional& x)
{
  this->type_ = x;
}

void Component::
type (::std::unique_ptr< type_type > x)
{
  this->type_.set (std::move (x));
}

const Component::name_optional& Component::
name () const
{
  return this->name_;
}

Component::name_optional& Component::
name ()
{
  return this->name_;
}

void Component::
name (const name_type& x)
{
  this->name_.set (x);
}

void Component::
name (const name_optional& x)
{
  this->name_ = x;
}

void Component::
name (::std::unique_ptr< name_type > x)
{
  this->name_.set (std::move (x));
}


// Parameter
// 

const Parameter::name_type& Parameter::
name () const
{
  return this->name_.get ();
}

Parameter::name_type& Parameter::
name ()
{
  return this->name_.get ();
}

void Parameter::
name (const name_type& x)
{
  this->name_.set (x);
}

void Parameter::
name (::std::unique_ptr< name_type > x)
{
  this->name_.set (std::move (x));
}


#include <xsd/cxx/xml/dom/parsing-source.hxx>

// PhysicsConfiguration
//

PhysicsConfiguration::
PhysicsConfiguration ()
: ::xml_schema::type (),
  Component_ (this)
{
}

PhysicsConfiguration::
PhysicsConfiguration (const PhysicsConfiguration& x,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  Component_ (x.Component_, f, this)
{
}

PhysicsConfiguration::
PhysicsConfiguration (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  Component_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void PhysicsConfiguration::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // Component
    //
    if (n.name () == "Component" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< Component_type > r (
        Component_traits::create (i, f, this));

      this->Component_.push_back (::std::move (r));
      continue;
    }

    break;
  }
}

PhysicsConfiguration* PhysicsConfiguration::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class PhysicsConfiguration (*this, f, c);
}

PhysicsConfiguration& PhysicsConfiguration::
operator= (const PhysicsConfiguration& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->Component_ = x.Component_;
  }

  return *this;
}

PhysicsConfiguration::
~PhysicsConfiguration ()
{
}

// Component
//

Component::
Component ()
: ::xml_schema::type (),
  Parameter_ (this),
  type_ (this),
  name_ (this)
{
}

Component::
Component (const Component& x,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  Parameter_ (x.Parameter_, f, this),
  type_ (x.type_, f, this),
  name_ (x.name_, f, this)
{
}

Component::
Component (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  Parameter_ (this),
  type_ (this),
  name_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
    this->parse (p, f);
  }
}

void Component::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // Parameter
    //
    if (n.name () == "Parameter" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< Parameter_type > r (
        Parameter_traits::create (i, f, this));

      this->Parameter_.push_back (::std::move (r));
      continue;
    }

    break;
  }

  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "type" && n.namespace_ ().empty ())
    {
      this->type_.set (type_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "name" && n.namespace_ ().empty ())
    {
      this->name_.set (name_traits::create (i, f, this));
      continue;
    }
  }
}

Component* Component::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class Component (*this, f, c);
}

Component& Component::
operator= (const Component& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->Parameter_ = x.Parameter_;
    this->type_ = x.type_;
    this->name_ = x.name_;
  }

  return *this;
}

Component::
~Component ()
{
}

// Parameter
//

Parameter::
Parameter (const ::xml_schema::double_& _xsd_double__base,
           const name_type& name)
: ::xsd::cxx::tree::fundamental_base< ::xml_schema::double_, char, ::xml_schema::simple_type, ::xsd::cxx::tree::schema_type::double_ > (_xsd_double__base),
  name_ (name, this)
{
}

Parameter::
Parameter (const Parameter& x,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
: ::xsd::cxx::tree::fundamental_base< ::xml_schema::double_, char, ::xml_schema::simple_type, ::xsd::cxx::tree::schema_type::double_ > (x, f, c),
  name_ (x.name_, f, this)
{
}

Parameter::
Parameter (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
: ::xsd::cxx::tree::fundamental_base< ::xml_schema::double_, char, ::xml_schema::simple_type, ::xsd::cxx::tree::schema_type::double_ > (e, f | ::xml_schema::flags::base, c),
  name_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, false, false, true);
    this->parse (p, f);
  }
}

void Parameter::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "name" && n.namespace_ ().empty ())
    {
      this->name_.set (name_traits::create (i, f, this));
      continue;
    }
  }

  if (!name_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "name",
      "");
  }
}

Parameter* Parameter::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class Parameter (*this, f, c);
}

Parameter& Parameter::
operator= (const Parameter& x)
{
  if (this != &x)
  {
    static_cast< ::xsd::cxx::tree::fundamental_base< ::xml_schema::double_, char, ::xml_schema::simple_type, ::xsd::cxx::tree::schema_type::double_ >& > (*this) = x;
    this->name_ = x.name_;
  }

  return *this;
}

Parameter::
~Parameter ()
{
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

::std::unique_ptr< ::PhysicsConfiguration >
Physics (const ::std::string& u,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::std::unique_ptr< ::PhysicsConfiguration > (
    ::Physics (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::PhysicsConfiguration >
Physics (const ::std::string& u,
         ::xml_schema::error_handler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::PhysicsConfiguration > (
    ::Physics (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::PhysicsConfiguration >
Physics (const ::std::string& u,
         ::xercesc::DOMErrorHandler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::PhysicsConfiguration > (
    ::Physics (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::PhysicsConfiguration >
Physics (::std::istream& is,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::Physics (isrc, f, p);
}

::std::unique_ptr< ::PhysicsConfiguration >
Physics (::std::istream& is,
         ::xml_schema::error_handler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::Physics (isrc, h, f, p);
}

::std::unique_ptr< ::PhysicsConfiguration >
Physics (::std::istream& is,
         ::xercesc::DOMErrorHandler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::Physics (isrc, h, f, p);
}

::std::unique_ptr< ::PhysicsConfiguration >
Physics (::std::istream& is,
         const ::std::string& sid,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::Physics (isrc, f, p);
}

::std::unique_ptr< ::PhysicsConfiguration >
Physics (::std::istream& is,
         const ::std::string& sid,
         ::xml_schema::error_handler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::Physics (isrc, h, f, p);
}

::std::unique_ptr< ::PhysicsConfiguration >
Physics (::std::istream& is,
         const ::std::string& sid,
         ::xercesc::DOMErrorHandler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::Physics (isrc, h, f, p);
}

::std::unique_ptr< ::PhysicsConfiguration >
Physics (::xercesc::InputSource& i,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
{
  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::std::unique_ptr< ::PhysicsConfiguration > (
    ::Physics (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::PhysicsConfiguration >
Physics (::xercesc::InputSource& i,
         ::xml_schema::error_handler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::PhysicsConfiguration > (
    ::Physics (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::PhysicsConfiguration >
Physics (::xercesc::InputSource& i,
         ::xercesc::DOMErrorHandler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::PhysicsConfiguration > (
    ::Physics (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::PhysicsConfiguration >
Physics (const ::xercesc::DOMDocument& doc,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
{
  if (f & ::xml_schema::flags::keep_dom)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

    return ::std::unique_ptr< ::PhysicsConfiguration > (
      ::Physics (
        std::move (d), f | ::xml_schema::flags::own_dom, p));
  }

  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "Physics" &&
      n.namespace_ () == "")
  {
    ::std::unique_ptr< ::PhysicsConfiguration > r (
      ::xsd::cxx::tree::traits< ::PhysicsConfiguration, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "Physics",
    "");
}

::std::unique_ptr< ::PhysicsConfiguration >
Physics (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
         ::xml_schema::flags f,
         const ::xml_schema::properties&)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
    ((f & ::xml_schema::flags::keep_dom) &&
     !(f & ::xml_schema::flags::own_dom))
    ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
    : 0);

  ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (f & ::xml_schema::flags::keep_dom)
    doc.setUserData (::xml_schema::dom::tree_node_key,
                     (c.get () ? &c : &d),
                     0);

  if (n.name () == "Physics" &&
      n.namespace_ () == "")
  {
    ::std::unique_ptr< ::PhysicsConfiguration > r (
      ::xsd::cxx::tree::traits< ::PhysicsConfiguration, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "Physics",
    "");
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

